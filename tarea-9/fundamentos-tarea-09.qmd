---
title: "Tarea-09"
author: "Brandon Francisco Hernández Troncoso"
format: html
editor: visual
self-contained: true
---

Sean $X_1,...,X_n \sim N(\mu, 1)$ y $\theta = e^{\mu}$. Simula una muestra de tamaño $n = 100$ usando $\mu = 5$.

* Usa bootstrap paramétrico para construir un intervalo del 95% de confianza.

* Usa bootstrap no paramétrico y compara tus respuestas.

* Realiza un histograma de replicaciones bootstrap para cada método, estas son estimaciones de la distribución $\hat{\theta}$. Comparalos con la verdadera distribución de $\hat{\theta}$
(que puedes obtener vía simulación). ¿Cuál es la aproximación más cercana a la verdadera distribución?

```{r message=FALSE, warning=FALSE}
library(tidyverse)

# simulando muestra
genera_muestra <- function(n, mu){
  rnorm(n, mu, 1)
}
```

```{r}
muestra <- genera_muestra(100, 5)
```

```{r}
crear_log_p <- function(x){
  log_p <- function(pars){
    media = pars[1]
    desv_est = pars[2]
    # ve la ecuación del ejercicio anterior
    z <- (x - media) / desv_est
    log_verosim <- -(log(desv_est) +  0.5 * mean(z^2))
    log_verosim
  }  
  log_p
}
log_p <- crear_log_p(muestra)
```

```{r message=FALSE, warning=FALSE}
res <- optim(c(0, 0.5), log_p, control = list(fnscale = -1, maxit = 1000), method = "Nelder-Mead")
res$convergence
```

```{r}
est_mle <- tibble(parametro = c("media", "sigma"), estimador = res$par) |>
  column_to_rownames(var = "parametro")

est_mle
```

```{r}
simular_modelo <- function(n, media, sigma){
  rnorm(n, media, sigma)
}
muestra_bootstrap <- simular_modelo(length(muestra), 
                                    est_mle["media", "estimador"],
                                    est_mle["sigma", "estimador"])
head(muestra_bootstrap)
```
```{r message=FALSE, warning=FALSE}
# creamos nueva verosimilitud para muestra bootstrap
log_p_boot <- crear_log_p(muestra_bootstrap)
# optimizamos
res_boot <- optim(c(0, 0.5), log_p_boot, 
  control = list(fnscale = -1, maxit = 1000), method = "Nelder-Mead")
res_boot$convergence
```

```{r warning=FALSE, message=FALSE}
est_mle_boot <- tibble(parametro = c("media", "sigma"), estimador = res_boot$par) %>% 
  column_to_rownames(var = "parametro")
est_mle_boot["theta",] = exp(est_mle[1])
est_mle_boot
```

```{r message=FALSE, warning=FALSE}
rep_boot <- function(rep, crear_log_p, est_mle, n){
  muestra_bootstrap <- simular_modelo(length(muestra), 
                               est_mle["media", "estimador"], 
                               est_mle["sigma", "estimador"])
  log_p_boot <- crear_log_p(muestra_bootstrap)
  # optimizamos
  res_boot <- optim(c(0, 0.5), log_p_boot, 
    control = list(fnscale = -1, maxit = 1000), method = "Nelder-Mead")
  try(if(res_boot$convergence != 0) stop("No se alcanzó convergencia."))
  tibble(parametro = c("theta"), estimador_boot = exp(res_boot$par[1])) 
}
reps_boot <- map_dfr(1:5000, ~ rep_boot(.x, crear_log_p, est_mle, 
                                        n = length(muestra)), rep = ".id") 
reps_boot
```

```{r}
error_est <- reps_boot %>% group_by(parametro) %>% 
  summarise(ee_boot = sd(estimador_boot)) 
error_est
```

```{r}
data.frame(parametro="theta", 
           estimado = est_mle_boot[3,],
           ee = error_est$ee_boot,
           inferior = est_mle_boot[3,] - 2*error_est$ee_boot,
           superior = 2*error_est$ee_boot + est_mle_boot[3,])
```

```{r}
bootstrap <- map_dbl(1:5000, ~ data.frame(muestra) |>
                  slice_sample(n=100, replace = TRUE) |>
                  summarise(theta = exp(mean(muestra))) |> pull(theta))
```

```{r}
theta_boots <- tibble(bootstrap)
theta_boots
```

```{r}
media_muestra <- mean(muestra)
media_muestra
```

```{r}
sd_error_boots <- sd(as.numeric(unlist(theta_boots)))
sd_error_boots
```

```{r}
res <- tibble("estimador"="theta", 
              "valor"=exp(mean(muestra)), 
              "ee" = sd_error_boots,
              "superior" = exp(mean(muestra)) + 2*sd_error_boots,
              "inferior" = exp(mean(muestra)) - 2*sd_error_boots)
res
```

```{r}
g_histograma <- ggplot(reps_boot, aes(x = estimador_boot)) + geom_histogram(binwidth = 5)
g_histograma
```

```{r}
g_histograma <- ggplot(theta_boots, aes(x = bootstrap)) + geom_histogram(binwidth = 5)
g_histograma
```


```{r}
simulaciones <- map_dbl(1:5000, ~ tibble(muestra=genera_muestra(100, 5)) |>
                  summarise(mean_theta = exp(mean(muestra))) |> pull(mean_theta))
```

```{r}
g_histograma <- ggplot(tibble(theta=simulaciones), aes(x = theta)) + geom_histogram(binwidth = 5)
g_histograma
```

